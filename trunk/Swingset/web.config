<?xml version="1.0"?>
<configuration>
	<configSections>
    <section name="esapi" type="System.Configuration.NameValueSectionHandler" requirePermission="false"/>
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" requirePermission="false"/>
		<!--
    <sectionGroup name="system.web.extensions" type="System.Web.Configuration.SystemWebExtensionsSectionGroup, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35">
			<sectionGroup name="scripting" type="System.Web.Configuration.ScriptingSectionGroup, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35">
				<section name="scriptResourceHandler" type="System.Web.Configuration.ScriptingScriptResourceHandlerSection, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" allowDefinition="MachineToApplication"/>
				<sectionGroup name="webServices" type="System.Web.Configuration.ScriptingWebServicesSectionGroup, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35">
					<section name="jsonSerialization" type="System.Web.Configuration.ScriptingJsonSerializationSection, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" allowDefinition="Everywhere"/>
					<section name="profileService" type="System.Web.Configuration.ScriptingProfileServiceSection, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" allowDefinition="MachineToApplication"/>
					<section name="authenticationService" type="System.Web.Configuration.ScriptingAuthenticationServiceSection, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" allowDefinition="MachineToApplication"/>
					<section name="roleService" type="System.Web.Configuration.ScriptingRoleServiceSection, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" allowDefinition="MachineToApplication"/>
				</sectionGroup>
			</sectionGroup>      
		</sectionGroup>
    -->
	</configSections>
  
  
  <!--
	<appSettings/>
	<connectionStrings/>
	-->
  <system.web>
		<!-- 
            Set compilation debug="true" to insert debugging 
            symbols into the compiled page. Because this 
            affects performance, set this value to true only 
            during development.
            
            Security note: This value should not be true in any production deployment.
        -->
		<compilation debug="true">
      <!--
      <assemblies>
				<add assembly="System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>
				<add assembly="System.Data.DataSetExtensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>
				<add assembly="System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
				<add assembly="System.Xml.Linq, Version=3.5.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>
			</assemblies>
      -->
		</compilation>
    
    
    
		<roleManager enabled="true"/>
		
    <membership>
			<providers>
				<remove name="AspNetSqlMembershipProvider"/>
				<add name="AspNetSqlMembershipProvider" type="System.Web.Security.SqlMembershipProvider, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" 
             connectionStringName="LocalSqlServer" 
                         
             enablePasswordRetrieval="false" 
             enablePasswordReset="true" 
             requiresQuestionAndAnswer="true" 
             
             applicationName="/" 
             requiresUniqueEmail="true" 
             
             passwordFormat="Hashed"             
             
             maxInvalidPasswordAttempts="5"
             passwordAttemptWindow="10"
             
             minRequiredPasswordLength="1"
             minRequiredNonalphanumericCharacters="0"
             passwordStrengthRegularExpression="^(?=.{8,})(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*\W).*$"
         />
			</providers>
		</membership>
		<!--
            The <authentication> section enables configuration 
            of the security authentication mode used by 
            ASP.NET to identify an incoming user. 
            
            Security note: Forms authentication is a standard, secure way to authenticate users. Note the secure settings below:
            
            cookieless:
            domain:
            enableCrossAppRedirects:
            loginUrl:
            requireSSL:
            name:
            path:
            protection:
            slidingExpiration:
            timeout:
     -->
		<authentication mode="Forms">
		<forms cookieless="UseCookies" defaultUrl="Default.aspx" enableCrossAppRedirects="false" 
             loginUrl="Login.aspx" requireSSL="false" name=".ESAPI_FORMSAUTHENTICATION" protection="All" 
             slidingExpiration="false" timeout="10"/>
		</authentication>
		<!--
            The <customErrors> section enables configuration 
            of what to do if/when an unhandled error occurs 
            during the execution of a request. Specifically, 
            it enables developers to configure html error pages 
            to be displayed in place of a error stack trace.
      
            Security note: Custom error prevents detailed error information from being displayed to users. Do not disable. Fix
    -->
    <customErrors mode="Off"/> <!--" defaultRedirect="Error.aspx" />
    
            Security note: I have no idea what this does :)
      
    -->
		<anonymousIdentification cookieless="UseCookies" cookieName=".ESAPI_ANONYMOUS" cookieProtection="All" 
                             cookieRequireSSL="false" cookieSlidingExpiration="false" cookieTimeout="10" 
                             enabled="true"/>
		<!-- 
            Security note: This should prevent all users from accessing all resources except those you allow.
      -->
    <healthMonitoring enabled="true" heartbeatInterval="60"/>
    <!--
    -->
    <httpCookies httpOnlyCookies="true" requireSSL="false"/>
		<!--
      <machineKey />
    -->
		<pages viewStateEncryptionMode="Always">
      <controls>
        <add tagPrefix="asp" namespace="System.Web.UI" assembly="System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
        <add tagPrefix="asp" namespace="System.Web.UI.WebControls" assembly="System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
      </controls>
		</pages>
		
    <!--    
    -->
    <sessionState cookieless="false" cookieName=".ESAPI_SESSIONID" regenerateExpiredSessionId="true" timeout="10"/>
		<!--
    -->
    <trace enabled="false"/>
		<!--
    -->
    <trust level="Full"/>
  <!--
    
    <httpHandlers>
			<remove verb="*" path="*.asmx"/>
			<add verb="*" path="*.asmx" validate="false" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
			<add verb="*" path="*_AppService.axd" validate="false" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
			<add verb="GET,HEAD" path="ScriptResource.axd" type="System.Web.Handlers.ScriptResourceHandler, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" validate="false"/>
		</httpHandlers>
		
    <httpModules>
			<add name="ScriptModule" type="System.Web.Handlers.ScriptModule, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
		</httpModules>	 
  -->
  </system.web>

  <!--
  <system.codedom>
		<compilers>
			<compiler language="c#;cs;csharp" extension=".cs" warningLevel="4" type="Microsoft.CSharp.CSharpCodeProvider, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
				<providerOption name="CompilerVersion" value="v3.5"/>
				<providerOption name="WarnAsError" value="false"/>
			</compiler>
		</compilers>
	</system.codedom>
	-->
  
  <esapi>
    <!-- Encryption -->
    <add key="MasterPassword" value="owasp1"/>
    <add key="MasterSalt" value="saltsalt"/>
    <add key="CharacterEncoding" value="UTF-8"/>
    <add key="HashAlgorithm" value="SHA512"/>
    <add key="HashIterations" value="1024"/>
    <add key="EncryptionAlgorithm" value="Rijndael"/>
    <add key="RandomAlgorithm" value=""/>
    <add key="DigitalSignatureAlgorithm" value="DSA"/>
    

    <!-- Validation 
    
     The ESAPI validator does many security checks on input, such as canonicalization
     and whitelist validation. Note that all of these validation rules are applied *after*
     canonicalization. Double-encoded characters (even with different encodings involved,
     are never allowed.
    
     To use:
    
     First set up a pattern below. You can choose any name you want, prefixed by the word
     "Validation." For example:
       Validaton.email=^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+\.[a-zA-Z]{2,4}$
    
     Then you can validate in your code against the pattern like this:
       Validator.getInstance().validateDataFromBrowser( "Email", input );
       Validator.getInstance().isValidDataFromBrowser( "Email", input );
    -->
    <add key="Validator.SafeString" value="^[A-Za-z0-9.]{0,1024}$"/>
    <add key="Validator.Email" value="^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+\.[a-zA-Z]{2,4}$"/>
    <add key="Validator.IPAddress" value="^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"/>
    <add key="Validator.URL" value="^(ht|f)tp(s?)\:\/\/[0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*(:(0-9)*)*(\/?)([a-zA-Z0-9\-\.\?\,\'\/\\\+=&amp;%\$#_]*)?$"/>
    <add key="Validator.CreditCard" value="^(\d{4}[- ]?){3}\d{4}$"/>
    <add key="Validator.SSN" value="^(?!000)([0-6]\d{2}|7([0-6]\d|7[012]))([ -]?)(?!00)\d\d\3(?!0000)\d{4}$"/>
    <!-- Validators used by ESAPI -->
    <add key="Validator.AccountName" value="^[a-zA-Z0-9]{3,20}$"/>
    <add key="Validator.SystemCommand" value="^[a-zA-Z\-\/]{0,64}$"/>
    <add key="Validator.RoleName" value="^[a-z]{1,20}$"/>
    <add key="Validator.Redirect" value="^\/test.*$"/>
    <!-- Validation of file related input -->
    <add key="Validator.FileName" value="^[a-zA-Z0-9.\\-_ ]{0,255}$"/>
    <add key="Validator.DirectoryName" value="^[a-zA-Z0-9.-\\_ ]{0,255}$"/>
    <!-- Global HTTP Validation Rules -->
    <add key="Validator.HTTPParameterName" value="^[a-zA-Z0-9]*$"/>
    <add key="Validator.HTTPParameterValue" value="^[a-zA-Z0-9._\- ]*$"/>
    <add key="Validator.HTTPCookieName" value="^[a-zA-Z0-9\-]*$"/>
    <add key="Validator.HTTPCookieValue" value="^[a-zA-Z0-9\-= ]*$"/>
    <add key="Validator.HTTPHeaderName" value="^[a-zA-Z0-9\-]*$"/>
    <add key="Validator.HTTPHeaderValue" value="^[a-zA-Z0-9()\-=\*\.\?;,+\/:&amp;]*$"/>
    <!-- Validation of file uploads -->
    <add key="ValidExtensions" value=".zip,.pdf,.doc,.docx,.ppt,.pptx,.tar,.gz,.tgz,.rar,.war,.jar,.ear,.xls,.rtf,.properties,.java,.class,.txt,.xml,.jsp,.jsf,.exe,.dll"/>
    <add key="MaxUploadFileBytes" value="500000000"/>
    <!-- Content-Type header -->
    <add key="ResponseContentType" value="text/html; charset=UTF-8"/>
    <!-- Logging
    
     Logging level, values are ALL, SEVERE, WARNING, INFO, DEBUG? -->
    <add key="LogLevel" value="ALL"/>
    
    <!-- Algorithms
     WARNING: Changing these settings will invalidate all user passwords, hashes, and encrypted data
     WARNING: Reasonable values for these algorithms will be tested and documented in a future release
    -->
    <add key="CharacterEncoding" value="UTF-8"/>
    <!-- Intrusion Detection
    
     Each event has a base to which .count, .interval, and .action are added
     The IntrusionException will fire if we receive "count" events within "interval" seconds
     The IntrusionDetector is configurable to take the following actions: log, logout, and disable
      (multiple actions separated by commas are allowed e.g. event.test.actions=log,disable
    
     Custom Events
     Names must start with "event." as the base
     Use IntrusionDetector.AddEvent( "test" ) in your code to trigger "event.test" here
    -->
    <add key="event.test.count" value="3"/>
    <add key="event.test.interval" value="10"/>
    <add key="event.test.actions" value="logout"/>
    <!-- Exception Events
     All EnterpriseSecurityExceptions are registered automatically
     Call IntrusionDetector.getInstance().addException(e) for Exceptions that do not extend EnterpriseSecurityException
     Use the fully qualified classname of the exception as the base
    -->
    <add key="Owasp.Esapi.Errors.IntrusionException.Count" value="1"/>
    <add key="Owasp.Esapi.Errors.IntrusionException.interval" value="1"/>
    <add key="Owasp.Esapi.Errors.IntrusionException.actions" value="log,disable,logout"/>
    
    <add key="Owasp.Esapi.Errors.ValidationException.count" value="10"/>
    <add key="Owasp.Esapi.Errors.ValidationException.interval" value="10"/>
    <add key="Owasp.Esapi.Errors.ValidationException.actions" value="disable"/>

    <add key="AccessControllerClass" value="Owasp.Esapi.AccessController" />
    <add key="EncoderClass" value="Owasp.Esapi.Encoder" />
    <add key="EncyptorClass" value="Owasp.Esapi.Encryptor" />
    <add key="IntrusionDetectorClass" value="Owasp.Esapi.IntrusionDetector" />
    <add key="LoggerClass" value="Owasp.Esapi.Logger" />
    <add key="RandomizerClass" value="Owasp.Esapi.Randomizer" />
    <add key="SecurityConfigurationClass" value="Owasp.Esapi.SecurityConfiguration" />
    <add key="ValidatorClass" value="Owasp.Esapi.Validator" />
  </esapi>



  <!-- Configure log4net -->
  <log4net>
    <!-- Add an appender of type FileAppender to configure log4net to log messages (error, information, debug etc.) to a text file -->
    <appender name="LogFileAppender" type="log4net.Appender.FileAppender">
      <param name="File" value="App_Data/Log.txt" />
      <param name="AppendToFile" value="true" />
      <layout type="log4net.Layout.PatternLayout">
        <param name="ConversionPattern" value="%d %-5p %c %m%n" />
      </layout>
    </appender>
    <root>      
      <level value="ALL" />
      <appender-ref ref="LogFileAppender" />
    </root>
  </log4net>
</configuration>

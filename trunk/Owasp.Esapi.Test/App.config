<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
      <section name="esapi" type="System.Configuration.NameValueSectionHandler"/>
      <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" />
  </configSections>
  <esapi>
    <add key="ResourceDirectory" value="C:\Documents and Settings\TestUser\My Documents\Visual Studio 2005\Projects\Owasp.Esapi\Owasp.Esapi\resources"/>
    <!-- Authentication -->
    <add key="RememberTokenDuration" value="14"/>
    <add key="AllowedLoginAttempts" value="3"/>
    <add key="MaxOldPasswordHashes" value="13"/>
    <add key="UsernameParameterName" value="username"/>
    <add key="PasswordParameterName" value="password"/>

    <!-- Encryption -->
    <add key="MasterPassword" value="owasp1"/>
    <add key="MasterSalt" value="testtest"/>


    <!-- Validation 
    
     The ESAPI validator does many security checks on input, such as canonicalization
     and whitelist validation. Note that all of these validation rules are applied *after*
     canonicalization. Double-encoded characters (even with different encodings involved,
     are never allowed.
    
     To use:
    
     First set up a pattern below. You can choose any name you want, prefixed by the word
     "Validation." For example:
       Validaton.email=^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+\.[a-zA-Z]{2,4}$
    
     Then you can validate in your code against the pattern like this:
       Validator.getInstance().validateDataFromBrowser( "Email", input );
       Validator.getInstance().isValidDataFromBrowser( "Email", input );
    -->
    <add key="Validator.SafeString" value="^[A-Za-z0-9.]{0,1024}$"/>
    <add key="Validator.Email" value="^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+\.[a-zA-Z]{2,4}$"/>
    <add key="Validator.IPAddress" value="^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"/>
    <add key="Validator.URL" value="^(ht|f)tp(s?)\:\/\/[0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*(:(0-9)*)*(\/?)([a-zA-Z0-9\-\.\?\,\'\/\\\+=&amp;%\$#_]*)?$"/>
    <add key="Validator.CreditCard" value="^(\d{4}[- ]?){3}\d{4}$"/>
    <add key="Validator.SSN" value="^(?!000)([0-6]\d{2}|7([0-6]\d|7[012]))([ -]?)(?!00)\d\d\3(?!0000)\d{4}$"/>

    <!-- Validators used by ESAPI -->
    <add key="Validator.AccountName" value="^[a-zA-Z0-9]{3,20}$"/>
    <add key="Validator.SystemCommand" value="^[a-zA-Z\-\/]{0,64}$"/>
    <add key="Validator.RoleName" value="^[a-z]{1,20}$"/>
    <add key="Validator.Redirect" value="^\/test.*$"/>

    <!-- Validation of file related input -->
    <add key="Validator.FileName" value="^[a-zA-Z0-9.\\-_ ]{0,255}$"/>
    <add key="Validator.DirectoryName" value="^[a-zA-Z0-9.-\\_ ]{0,255}$"/>

    <!-- Global HTTP Validation Rules -->
    <add key="Validator.HTTPParameterName" value="^[a-zA-Z0-9]*$"/>
    <add key="Validator.HTTPParameterValue" value="^[a-zA-Z0-9._\- ]*$"/>
    <add key="Validator.HTTPCookieName" value="^[a-zA-Z0-9\-]*$"/>
    <add key="Validator.HTTPCookieValue" value="^[a-zA-Z0-9\-= ]*$"/>
    <add key="Validator.HTTPHeaderName" value="^[a-zA-Z0-9\-]*$"/>
    <add key="Validator.HTTPHeaderValue" value="^[a-zA-Z0-9()\-=\*\.\?;,+\/:&amp;]*$"/>

    <!-- Validation of file uploads -->
    <add key="ValidExtensions" value=".zip,.pdf,.doc,.docx,.ppt,.pptx,.tar,.gz,.tgz,.rar,.war,.jar,.ear,.xls,.rtf,.properties,.java,.class,.txt,.xml,.jsp,.jsf,.exe,.dll"/>
    <add key="MaxUploadFileBytes" value="500000000"/>


    <!-- Content-Type header -->
    <add key="ResponseContentType" value="text/html; charset=UTF-8"/>


    <!-- Logging
    
     Logging level, values are ALL, SEVERE, WARNING, INFO, DEBUG? -->
    <add key="LogLevel" value="ALL"/>

    <!-- Algorithms
     WARNING: Changing these settings will invalidate all user passwords, hashes, and encrypted data
     WARNING: Reasonable values for these algorithms will be tested and documented in a future release
    -->
      <add key="CharacterEncoding" value="UTF-8"/>
    <add key="HashAlgorithm" value="SHA512"/>
    <add key="HashIterations" value="1024"/>
    <add key="EncryptionAlgorithm" value="TripleDES"/>
    <add key="RandomAlgorithm" value=""/>
    <add key="DigitalSignatureAlgorithm" value="DSA"/>


    <!-- Intrusion Detection
    
     Each event has a base to which .count, .interval, and .action are added
     The IntrusionException will fire if we receive "count" events within "interval" seconds
     The IntrusionDetector is configurable to take the following actions: log, logout, and disable
      (multiple actions separated by commas are allowed e.g. event.test.actions=log,disable
    
     Custom Events
     Names must start with "event." as the base
     Use IntrusionDetector.addEvent( "test" ) in your code to trigger "event.test" here
    -->
    <add key="event.test.count" value="2"/>
    <add key="event.test.interval" value="10"/>
    <add key="event.test.actions" value="disable"/>

    <!-- Exception Events
     All EnterpriseSecurityExceptions are registered automatically
     Call IntrusionDetector.getInstance().addException(e) for Exceptions that do not extend EnterpriseSecurityException
     Use the fully qualified classname of the exception as the base
    -->
      <add key="Owasp.Esapi.Errors.IntrusionException.Count" value="1"/>
    <add key="Owasp.Esapi.Errors.IntrusionException.interval" value="1"/>
    <add key="Owasp.Esapi.Errors.IntrusionException.actions" value="log,disable,logout"/>

    <add key="Owasp.Esapi.Errors.ValidationException.count" value="10"/>
    <add key="Owasp.Esapi.Errors.ValidationException.interval" value="10"/>
    <add key="Owasp.Esapi.Errors.ValidationException.actions" value="disable"/>
    </esapi>



  <!-- Configure log4net -->
  <log4net>
    <!-- Add an appender of type FileAppender to configure log4net to log messages (error, information, debug etc.) to a text file -->
    <appender name="LogFileAppender" type="log4net.Appender.FileAppender">
      <param name="File" value="Log.txt" />
      <param name="AppendToFile" value="true" />
      <layout type="log4net.Layout.PatternLayout">
        <param name="Header" value="Hit header" />
        <param name="Footer" value="Fit footer" />
        <param name="ConversionPattern" value="%d [%t] %-5p %c %m%n" />
      </layout>
    </appender>    
    <root>
      <level value="DEBUG" />      
      <appender-ref ref="LogFileAppender" />      
    </root>
  </log4net>
  
  
</configuration>